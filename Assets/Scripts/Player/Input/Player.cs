//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Player/Input/Player.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Player: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Player()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""d5b78884-ad91-4df6-9116-080991b72f3d"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""9bb4c693-a6c5-4ccb-904d-bbe2be7392f8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""460c604a-2b0f-434b-9d26-220512c813e6"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""fa866c1d-8267-4268-b103-673bdf202274"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c69592e5-27ca-47a3-bc4c-a40ef2142e63"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d7f30d00-c8c9-45bf-a34c-09432b852136"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""005fd393-c203-47be-89ad-64d55dd24a48"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1e8e886a-44d9-439d-8a1e-0e3fae7fd10f"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""314f8cfe-432d-4a99-a96f-1f0d064a9147"",
            ""actions"": [
                {
                    ""name"": ""Add Coins"",
                    ""type"": ""Button"",
                    ""id"": ""e0786e27-2f75-4258-8931-b92c9d9dd36d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Spend Coins"",
                    ""type"": ""Button"",
                    ""id"": ""a5fa619f-9579-42d9-acdc-97b5cad3feea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""76787510-667b-474b-a90a-6da6e8c92eb1"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Add Coins"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8ce083a8-e4a9-4eb6-a2d7-22ad923762b7"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spend Coins"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Battle"",
            ""id"": ""6b1c95a5-0483-4700-a132-c4cb97b8da87"",
            ""actions"": [
                {
                    ""name"": ""UseFirstAbility"",
                    ""type"": ""Button"",
                    ""id"": ""1323ccd9-5fcf-4eca-9ea1-e4d22d1a8f7f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseSecondAbility"",
                    ""type"": ""Button"",
                    ""id"": ""8bd13a6c-1871-458a-b2b2-2c82b0294cce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseThirdAbility"",
                    ""type"": ""Button"",
                    ""id"": ""4041ee2c-f29e-4b78-9de8-b98043cd40b6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PhysicalAttack"",
                    ""type"": ""Button"",
                    ""id"": ""4d51c4f5-904e-490d-a763-af4e9fb2f9e7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""72dc645b-3ce0-4b98-813a-9243686cffe2"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseFirstAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""58f08db5-1768-4604-a786-c5e79c3394c9"",
                    ""path"": ""<XInputController>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseFirstAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9bfb62d5-a54b-4d58-b690-ac1f24be37dc"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseSecondAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f590ad97-f1f8-4c7d-af89-a2e9f4f7bad0"",
                    ""path"": ""<XInputController>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseSecondAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8be3f4ff-ad86-4b13-a8e4-bf3f60ec0d2e"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseThirdAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8bc32c0d-2ff6-498e-8828-b1b2063b4f8c"",
                    ""path"": ""<XInputController>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseThirdAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d6b7563a-9b7b-4768-a30e-0f4e4e3b2d08"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PhysicalAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b2a60ce4-c859-4e8f-90a3-836c40fe2fc9"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PhysicalAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""System"",
            ""id"": ""f44f34a3-d7d9-42fd-a8f7-9387b5e0545b"",
            ""actions"": [
                {
                    ""name"": ""Save"",
                    ""type"": ""Button"",
                    ""id"": ""dee5e6d3-5122-4a0a-94cd-c0433eb1bb13"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Load"",
                    ""type"": ""Button"",
                    ""id"": ""018e0e49-db97-4d04-beef-995ede07a24b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4d9bcf47-bce3-40bb-bc98-57057444e9d5"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Save"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""32b98af7-619d-4a4a-8833-99bb71b85c12"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Load"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Move = m_Movement.FindAction("Move", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_AddCoins = m_UI.FindAction("Add Coins", throwIfNotFound: true);
        m_UI_SpendCoins = m_UI.FindAction("Spend Coins", throwIfNotFound: true);
        // Battle
        m_Battle = asset.FindActionMap("Battle", throwIfNotFound: true);
        m_Battle_UseFirstAbility = m_Battle.FindAction("UseFirstAbility", throwIfNotFound: true);
        m_Battle_UseSecondAbility = m_Battle.FindAction("UseSecondAbility", throwIfNotFound: true);
        m_Battle_UseThirdAbility = m_Battle.FindAction("UseThirdAbility", throwIfNotFound: true);
        m_Battle_PhysicalAttack = m_Battle.FindAction("PhysicalAttack", throwIfNotFound: true);
        // System
        m_System = asset.FindActionMap("System", throwIfNotFound: true);
        m_System_Save = m_System.FindAction("Save", throwIfNotFound: true);
        m_System_Load = m_System.FindAction("Load", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_Move;
    public struct MovementActions
    {
        private @Player m_Wrapper;
        public MovementActions(@Player wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Movement_Move;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_AddCoins;
    private readonly InputAction m_UI_SpendCoins;
    public struct UIActions
    {
        private @Player m_Wrapper;
        public UIActions(@Player wrapper) { m_Wrapper = wrapper; }
        public InputAction @AddCoins => m_Wrapper.m_UI_AddCoins;
        public InputAction @SpendCoins => m_Wrapper.m_UI_SpendCoins;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @AddCoins.started += instance.OnAddCoins;
            @AddCoins.performed += instance.OnAddCoins;
            @AddCoins.canceled += instance.OnAddCoins;
            @SpendCoins.started += instance.OnSpendCoins;
            @SpendCoins.performed += instance.OnSpendCoins;
            @SpendCoins.canceled += instance.OnSpendCoins;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @AddCoins.started -= instance.OnAddCoins;
            @AddCoins.performed -= instance.OnAddCoins;
            @AddCoins.canceled -= instance.OnAddCoins;
            @SpendCoins.started -= instance.OnSpendCoins;
            @SpendCoins.performed -= instance.OnSpendCoins;
            @SpendCoins.canceled -= instance.OnSpendCoins;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);

    // Battle
    private readonly InputActionMap m_Battle;
    private List<IBattleActions> m_BattleActionsCallbackInterfaces = new List<IBattleActions>();
    private readonly InputAction m_Battle_UseFirstAbility;
    private readonly InputAction m_Battle_UseSecondAbility;
    private readonly InputAction m_Battle_UseThirdAbility;
    private readonly InputAction m_Battle_PhysicalAttack;
    public struct BattleActions
    {
        private @Player m_Wrapper;
        public BattleActions(@Player wrapper) { m_Wrapper = wrapper; }
        public InputAction @UseFirstAbility => m_Wrapper.m_Battle_UseFirstAbility;
        public InputAction @UseSecondAbility => m_Wrapper.m_Battle_UseSecondAbility;
        public InputAction @UseThirdAbility => m_Wrapper.m_Battle_UseThirdAbility;
        public InputAction @PhysicalAttack => m_Wrapper.m_Battle_PhysicalAttack;
        public InputActionMap Get() { return m_Wrapper.m_Battle; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BattleActions set) { return set.Get(); }
        public void AddCallbacks(IBattleActions instance)
        {
            if (instance == null || m_Wrapper.m_BattleActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BattleActionsCallbackInterfaces.Add(instance);
            @UseFirstAbility.started += instance.OnUseFirstAbility;
            @UseFirstAbility.performed += instance.OnUseFirstAbility;
            @UseFirstAbility.canceled += instance.OnUseFirstAbility;
            @UseSecondAbility.started += instance.OnUseSecondAbility;
            @UseSecondAbility.performed += instance.OnUseSecondAbility;
            @UseSecondAbility.canceled += instance.OnUseSecondAbility;
            @UseThirdAbility.started += instance.OnUseThirdAbility;
            @UseThirdAbility.performed += instance.OnUseThirdAbility;
            @UseThirdAbility.canceled += instance.OnUseThirdAbility;
            @PhysicalAttack.started += instance.OnPhysicalAttack;
            @PhysicalAttack.performed += instance.OnPhysicalAttack;
            @PhysicalAttack.canceled += instance.OnPhysicalAttack;
        }

        private void UnregisterCallbacks(IBattleActions instance)
        {
            @UseFirstAbility.started -= instance.OnUseFirstAbility;
            @UseFirstAbility.performed -= instance.OnUseFirstAbility;
            @UseFirstAbility.canceled -= instance.OnUseFirstAbility;
            @UseSecondAbility.started -= instance.OnUseSecondAbility;
            @UseSecondAbility.performed -= instance.OnUseSecondAbility;
            @UseSecondAbility.canceled -= instance.OnUseSecondAbility;
            @UseThirdAbility.started -= instance.OnUseThirdAbility;
            @UseThirdAbility.performed -= instance.OnUseThirdAbility;
            @UseThirdAbility.canceled -= instance.OnUseThirdAbility;
            @PhysicalAttack.started -= instance.OnPhysicalAttack;
            @PhysicalAttack.performed -= instance.OnPhysicalAttack;
            @PhysicalAttack.canceled -= instance.OnPhysicalAttack;
        }

        public void RemoveCallbacks(IBattleActions instance)
        {
            if (m_Wrapper.m_BattleActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBattleActions instance)
        {
            foreach (var item in m_Wrapper.m_BattleActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BattleActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BattleActions @Battle => new BattleActions(this);

    // System
    private readonly InputActionMap m_System;
    private List<ISystemActions> m_SystemActionsCallbackInterfaces = new List<ISystemActions>();
    private readonly InputAction m_System_Save;
    private readonly InputAction m_System_Load;
    public struct SystemActions
    {
        private @Player m_Wrapper;
        public SystemActions(@Player wrapper) { m_Wrapper = wrapper; }
        public InputAction @Save => m_Wrapper.m_System_Save;
        public InputAction @Load => m_Wrapper.m_System_Load;
        public InputActionMap Get() { return m_Wrapper.m_System; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SystemActions set) { return set.Get(); }
        public void AddCallbacks(ISystemActions instance)
        {
            if (instance == null || m_Wrapper.m_SystemActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SystemActionsCallbackInterfaces.Add(instance);
            @Save.started += instance.OnSave;
            @Save.performed += instance.OnSave;
            @Save.canceled += instance.OnSave;
            @Load.started += instance.OnLoad;
            @Load.performed += instance.OnLoad;
            @Load.canceled += instance.OnLoad;
        }

        private void UnregisterCallbacks(ISystemActions instance)
        {
            @Save.started -= instance.OnSave;
            @Save.performed -= instance.OnSave;
            @Save.canceled -= instance.OnSave;
            @Load.started -= instance.OnLoad;
            @Load.performed -= instance.OnLoad;
            @Load.canceled -= instance.OnLoad;
        }

        public void RemoveCallbacks(ISystemActions instance)
        {
            if (m_Wrapper.m_SystemActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISystemActions instance)
        {
            foreach (var item in m_Wrapper.m_SystemActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SystemActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SystemActions @System => new SystemActions(this);
    public interface IMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnAddCoins(InputAction.CallbackContext context);
        void OnSpendCoins(InputAction.CallbackContext context);
    }
    public interface IBattleActions
    {
        void OnUseFirstAbility(InputAction.CallbackContext context);
        void OnUseSecondAbility(InputAction.CallbackContext context);
        void OnUseThirdAbility(InputAction.CallbackContext context);
        void OnPhysicalAttack(InputAction.CallbackContext context);
    }
    public interface ISystemActions
    {
        void OnSave(InputAction.CallbackContext context);
        void OnLoad(InputAction.CallbackContext context);
    }
}
